version: '3.8'

services:
  # Next.js Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      # AWS Configuration
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION:-us-east-1}
      - AWS_S3_BUCKET_NAME=${AWS_S3_BUCKET_NAME}
      
      # Database Configuration
      - DATABASE_URL=mysql://root:password@mysql:3306/aws_next_express
      
      # DynamoDB Configuration
      - DYNAMODB_ENDPOINT=http://dynamodb-local:8000
      - DYNAMODB_USERS_TABLE=users
      - DYNAMODB_FILES_TABLE=files
      
      # Next.js Configuration
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET:-your_nextauth_secret}
      - NEXTAUTH_URL=http://localhost:3000
    depends_on:
      mysql:
        condition: service_healthy
      dynamodb-local:
        condition: service_started
    volumes:
      - .:/app
      - /app/node_modules
      - /app/.next
    networks:
      - app-network
    command: sh -c "npx prisma generate && npx prisma migrate deploy && node scripts/init-dynamodb.js && npm start"

  # MySQL Database (RDS alternative)
  mysql:
    image: mysql:8.0
    container_name: aws-next-mysql
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: aws_next_express
      MYSQL_USER: appuser
      MYSQL_PASSWORD: apppassword
    volumes:
      - mysql_data:/var/lib/mysql
      - ./mysql/init:/docker-entrypoint-initdb.d
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10
      interval: 10s
      start_period: 40s

  # DynamoDB Local
  dynamodb-local:
    image: amazon/dynamodb-local:latest
    container_name: aws-next-dynamodb
    ports:
      - "8000:8000"
    command: "-jar DynamoDBLocal.jar -sharedDb -dbPath /home/dynamodblocal/data/"
    volumes:
      - dynamodb_data:/home/dynamodblocal/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000 || exit 1"]
      timeout: 10s
      retries: 5
      interval: 30s
      start_period: 30s

  # phpMyAdmin for MySQL management
  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: aws-next-phpmyadmin
    ports:
      - "8080:80"
    environment:
      PMA_HOST: mysql
      PMA_PORT: 3306
      PMA_USER: root
      PMA_PASSWORD: password
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - app-network

  # DynamoDB Admin (Web UI for DynamoDB)
  dynamodb-admin:
    image: aaronshaf/dynamodb-admin
    container_name: aws-next-dynamodb-admin
    ports:
      - "8001:8001"
    environment:
      DYNAMO_ENDPOINT: http://dynamodb-local:8000
      AWS_REGION: us-east-1
      AWS_ACCESS_KEY_ID: test
      AWS_SECRET_ACCESS_KEY: test
    depends_on:
      - dynamodb-local
    networks:
      - app-network

  # Prometheus for monitoring (optional)
  prometheus:
    image: prom/prometheus
    container_name: aws-next-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - app-network
    profiles:
      - monitoring

  # Grafana for dashboards (optional)
  grafana:
    image: grafana/grafana
    container_name: aws-next-grafana
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - app-network
    profiles:
      - monitoring

volumes:
  mysql_data:
    driver: local
  dynamodb_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  app-network:
    driver: bridge

# Instructions:
# 1. Basic setup:
#    docker-compose -f docker-compose.full.yml up -d
#
# 2. With monitoring:
#    docker-compose -f docker-compose.full.yml --profile monitoring up -d
#
# 3. Stop all services:
#    docker-compose -f docker-compose.full.yml down
#
# 4. Reset all data:
#    docker-compose -f docker-compose.full.yml down -v
#
# Access URLs:
# - Application: http://localhost:3000
# - phpMyAdmin: http://localhost:8080 (root/password)
# - DynamoDB Admin: http://localhost:8001
# - Prometheus: http://localhost:9090 (with monitoring profile)
# - Grafana: http://localhost:3001 (admin/admin with monitoring profile) 